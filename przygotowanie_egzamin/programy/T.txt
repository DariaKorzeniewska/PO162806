 class ArrayAlg
{
    public static <T extends Comparable<T>> T min(T[] a)
    {
        if (a == null || a.length == 0) {
            return null;
        }

        T smallest = a[0];

        for (int j = 1; j < a.length; ++j) {
            if (smallest.compareTo(a[j]) > 0) {
                smallest = a[j];
            }
        }

        return smallest;
    }


------------

public class Pair<T>
{
    public Pair()
    {
        first = null;
        second = null;
    }

    public Pair(T first, T second)
    {
        this.first = first;
        this.second = second;
    }

    public T getFirst()
    {
        return first;
    }

    public T getSecond()
    {
        return second;
    }

    public void setFirst(T newValue)
    {
        first = newValue;
    }
    
    public void setSecond(T newValue)
    {
        second = newValue;
    }

    private T first;
    private T second;
}



------------------

import java.util.*;

public class PairDemo2a
{
    public static void main(String[] args)
    {
        GregorianCalendar[] birthdays = {
            new GregorianCalendar(1906, Calendar.DECEMBER, 9),  // G. Hopper
            new GregorianCalendar(1815, Calendar.DECEMBER, 10),  // A. Lovelace
            new GregorianCalendar(1903, Calendar.DECEMBER, 3),  // J. von Neumann
            new GregorianCalendar(1910, Calendar.JUNE, 22),  // K. Zuse
        };
        Pair<GregorianCalendar> mm = ArrayAlg.minmax(birthdays);
        System.out.println("min = " + mm.getFirst().getTime());
        System.out.println("max = " + mm.getSecond().getTime());
    }
}

class ArrayAlg
{
    public static <T extends Comparable> Pair<T> minmax(T[] a)
    {
        if (a == null || a.length == 0) {
            return null;
        }
        T min = a[0];
        T max = a[0];
        for (int i = 1; i < a.length; i++) {
            if (min.compareTo(a[i]) > 0) {
                min = a[i];
            }
            if (max.compareTo(a[i]) < 0) {
                max = a[i];
            }
        }
        return new Pair<T> (min, max);
    }
}

